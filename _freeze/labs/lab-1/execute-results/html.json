{
  "hash": "2ead49b9d94073e45b1db1eb6ee7a1f4",
  "result": {
    "markdown": "---\ntitle: \"Lab 1 - Meet the toolkit\"\neditor: visual\nreference-location: margin\n---\n\n## Introduction\n\nThis lab will go through much of the same workflow we've demonstrated in class.\nThe main goal is to reinforce our understanding of R and RStudio, which we will be using throughout the course both to learn the statistical concepts discussed in the course and to analyze real data and come to informed conclusions.\n\n::: callout-note\nR is the name of the programming language itself and RStudio is a convenient interface.\n:::\n\nAn additional goal is to reinforce git and GitHub, the collaboration and version control system that we will be using throughout the course.\n\n::: callout-note\nGit is a version control system (like \"Track Changes\" features from Microsoft Word but more powerful) and GitHub is the home for your Git-based projects on the internet (like DropBox but much better).\n:::\n\nAs the labs progress, you are encouraged to explore beyond what the labs dictate; a willingness to experiment will make you a much better programmer.\nBefore we get to that stage, however, you need to build some basic fluency in R.\nToday we begin with the fundamental building blocks of R and RStudio: the interface, reading in data, and basic commands.\n\nTo make versioning simpler, this is a solo lab.\nIn the future, you'll learn about collaborating on GitHub and producing a single lab report for your lab team, but for now, concentrate on getting the basics down.\n\n### Learning goals\n\nBy the end of the lab, you will...\n\n-   Be familiar with the workflow using R, RStudio, Git, and GitHub\n-   Gain practice writing a reproducible report using RMarkdown\n-   Practice version control using GitHub\n-   Be able to create data visualizations using `ggplot2`\n-   Be able to describe variable distributions and the relationship between multiple variables\n\n## Getting started\n\n::: callout-important\nYour lab TA will lead you through the Getting Started section.\n:::\n\n### Log in to RStudio\n\n-   Go to <https://vm-manage.oit.duke.edu/containers> and login with your Duke NetID and Password.\n-   Click **STA210** to log into the Docker container. You should now see the RStudio environment.\n\n::: callout-warning\nIf you haven't yet done so, you will need to reserve a container for STA210 first.\n:::\n\n### Set up your SSH key\n\nYou will authenticate GitHub using SSH.\nBelow are an outline of the authentication steps; you are encouraged to follow along as your TA demonstrates the steps.\n\n::: callout-note\nYou only need to do this authentication process one time on a single system.\n:::\n\n-   Type `credentials::ssh_setup_github()` into your console.\n-   R will ask \"No SSH key found. Generate one now?\" You should click 1 for yes.\n-   You will generate a key. It will begin with \"ssh-rsa....\" R will then ask \"Would you like to open a browser now?\" You should click 1 for yes.\n-   You may be asked to provide your GitHub username and password to log into GitHub. After entering this information, you should paste the key in and give it a name. You might name it in a way that indicates where the key will be used, e.g., `sta210`).\n\nYou can find more detailed instructions [here](https://github.com/DukeStatSci/github_auth_guide) if you're interested.\n\n### Configure Git\n\nThere is one more thing we need to do before getting started on the assignment.\nSpecifically, we need to configure your git so that RStudio can communicate with GitHub.\nThis requires two pieces of information: your name and email address.\n\nTo do so, you will use the `use_git_config()` function from the `usethis` package.\n\nType the following lines of code in the **console** in RStudio filling in your name and the email address associated with your GitHub account.\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_git_config(\n  user.name = \"GitHub username\", \n  user.email = \"Email associated with your GitHub account\"\n  )\n```\n:::\n\nFor example, mine would be\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_git_config(\n  user.name = \"mine-cetinkaya-rundel\", \n  user.email = \"cetinkaya.mine@gmail.com\"\n  )\n```\n:::\n\nYou are now ready interact with GitHub via RStudio!\n\n### Clone the repo & start new RStudio project\n\n-   Go to the course organization at [github.com/sta210-s22](https://github.com/sta210-s22 \"Course GitHub organization\") organization on GitHub.\n    Click on the repo with the prefix **lab-1**.\n    It contains the starter documents you need to complete the lab.\n\n-   Click on the green **CODE** button, select **Use SSH** (this might already be selected by default, and if it is, you'll see the text **Clone with SSH**).\n    Click on the clipboard icon to copy the repo URL.\n\n-   In RStudio, go to *File* ➛ *New Project* ➛*Version Control* ➛ *Git*.\n\n-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.\n\n-   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.\n\n-   Click *lab-1-ikea.qmd* to open the template R Markdown file.\n    This is where you will write up your code and narrative for the lab.\n\n### R and R Studio\n\nBelow are the components of the RStudio IDE.\n\n![](images/lab-1/rstudio.png){fig-alt=\"RStudio IDE\"}\n\nBelow are the components of a Quarto (.qmd) file.\n\n![](images/lab-1/quarto.png){fig-alt=\"Quarto document\"}\n\n### YAML\n\nThe top portion of your R Markdown file (between the three dashed lines) is called **YAML**.\nIt stands for \"YAML Ain't Markup Language\".\nIt is a human friendly data serialization standard for all programming languages.\nAll you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document.\n\n::: callout-important\nOpen the Quarto (\\``` .qmd` ``) file in your project, change the author name to your name, and render the document.\nExamine the rendered document.\n:::\n\n### Committing changes\n\nNow, go to the Git pane in your RStudio instance.\nThis will be in the top right hand corner in a separate tab.\n\nIf you have made changes to your Rmd file, you should see it listed here.\nClick on it to select it in this list and then click on **Diff**.\nThis shows you the *diff*erence between the last committed state of the document and its current state including changes.\nYou should see deletions in red and additions in green.\n\nIf you're happy with these changes, we'll prepare the changes to be pushed to your remote repository.\nFirst, **stage** your changes by checking the appropriate box on the files you want to prepare.\nNext, write a meaningful commit message (for instance, \"updated author name\") in the **Commit message** box.\nFinally, click **Commit**.\nNote that every commit needs to have a commit message associated with it.\n\nYou don't have to commit after every change, as this would get quite tedious.\nYou should commit states that are *meaningful to you* for inspection, comparison, or restoration.\n\nIn the first few assignments we will tell you exactly when to commit and in some cases, what commit message to use.\nAs the semester progresses we will let you make these decisions.\n\nNow let's make sure all the changes went to GitHub.\nGo to your GitHub repo and refresh the page.\nYou should see your commit message next to the updated files.\nIf you see this, all your changes are on GitHub and you're good to go!\n\n### Push changes\n\nNow that you have made an update and committed this change, it's time to push these changes to your repo on GitHub.\n\nIn order to push your changes to GitHub, you must have **staged** your **commit** to be pushed.\nclick on **Push**.\n\n## Packages\n\nWe will use the following package in today's lab.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n```\n:::\n\n::: {.cell-output-stderr}\n```\n✓ ggplot2 3.3.5     ✓ purrr   0.3.4\n✓ tibble  3.1.6     ✓ dplyr   1.0.7\n✓ tidyr   1.1.4     ✓ stringr 1.4.0\n✓ readr   2.1.1     ✓ forcats 0.5.1\n```\n:::\n\n::: {.cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\n```\n:::\n:::\n\nThe tidyverse is a meta-package.\nWhen you load it you get eight packages loaded for you:\n\n-   **ggplot2**: for data visualization\n-   **dplyr**: for data wrangling\n-   **tidyr**: for data tidying and rectangling\n-   **readr**: for reading and writing data\n-   **tibble**: for modern, tidy data frames\n-   **stringr**: for string manipulation\n-   **forcats**: for dealing with factors\n-   **purrr**: for iteration with functional programming\n\nThe message that's printed when you load the package tells you which versions of these packages are loaded as well as any conflicts they may have introduced, e.g., the `filter()` function from dplyr has now masked (overwritten) the `filter()` function available in base R (and that's ok, we'll use `dplyr::filter()` anyway).\n\nWe'll be using functionality from all of these packages throughout the semester, though we'll always load them all at once with `library(tidyverse)`.\nYou can find out more about the tidyverse and each of the packages that make it up [here](https://www.tidyverse.org/).\n\n## Data: Ikea furniture\n\nToday's data is all about [Ikea](https://www.ikea.com/) furniture.\nThe data was obtained from the [TidyTuesday](https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-11-03/readme.md) data collection.\n\nUse the code below to read in the data.\n\n::: {.cell}\n\n```{.r .cell-code}\nikea <- read_csv(\"data/ikea.csv\")\n```\n:::\n\n### Data dictionary\n\nThe variable definitions are as follows:\n\n| variable            | class     | description                                                                                         |\n|---------------------|-----------|-----------------------------------------------------------------------------------------------------|\n| `item_id`           | double    | item id which can be used later to merge with other IKEA data frames                                |\n| `name`              | character | the commercial name of items                                                                        |\n| `category`          | character | the furniture category that the item belongs to (Sofas, beds, chairs, Trolleys,...)                 |\n| `sellable_online`   | logical   | Sellable online TRUE or FALSE                                                                       |\n| `link`              | character | the web link of the item                                                                            |\n| `other_colors`      | character | if other colors are available for the item, or just one color as displayed in the website (Boolean) |\n| `short_description` | character | a brief description of the item                                                                     |\n| `designer`          | character | The name of the designer who designed the item. this is extracted from the full_description column. |\n| `depth`             | double    | Depth of the item in Centimeter                                                                     |\n| `height`            | double    | Height of the item in Centimeter                                                                    |\n| `width`             | double    | Width of the item in Centimeter                                                                     |\n| `price_usd`         | double    | the current price in US dollars as it is shown in the website by 4/20/2020                          |\n\n### View the data\n\nBefore doing any analysis, you may want to get quick view of the data.\nThis is useful when you've imported data to see if your data imported correctly.\nWe can use the `view()` function to see the entire data set in RStudio.\nType the code below in the **Console** to view the entire dataset.\n\n::: {.cell}\n\n```{.r .cell-code}\nview(ikea)\n```\n:::\n\n## Exercises\n\nWrite all code and narrative in your R Markdown file.\nWrite all narrative in complete sentences.\nThroughout the assignment, you should periodically **Render** your Quarto document to produce the updated PDF, **commit** the changes in the Git pane, and **push** the updated files to GitHub.\n\n::: callout-tip\nMake sure we can read all or your code in your PDF document.\nThis means you will need to break up long lines of code.\nOne way to help avoid long lines of code is is start a new line after every pipe (`%>%`) and plus sign (`+`).\n:::\n\n### Exercise 1\n\nThe `view()` function helped us get a quick view of the dataset, but let's get more detail about its structure.\nViewing a summary of the data is a useful starting point for data analysis, especially if the dataset has a large number of observations (rows) or variables (columns).\nRun the code below to use the `glimpse()` function to see a summary of the `ikea` dataset.\n\nHow many observations are in the `ikea` dataset?\nHow many variables?\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(ikea)\n```\n:::\n\n::: callout-note\nIn your `lab-1-ikea.qmd` document you'll see that we already added the code required for the exercise as well as a sentence where you can fill in the blanks to report the answer.\nUse this format for the remaining exercises.\n\nAlso note that the code chunk as a label: `glimpse-data`.\nIt's not required, but good practice and highly encouraged to label your code chunks in this way.\n:::\n\n### Exercise 2\n\nWe begin each regression analysis with exploratory data analysis (EDA) to help us \"get to know\" the data and examine the variable distributions and relationships between variables.\nWe do this by visualizing the data and calculating summary statistics to describe the variables in our dataset.\nIn this lab, we will focus on data visualizations.\n\nLet's begin by looking at the price of Ikea furniture.\nUse the code below to visualize the distribution of `price_usd`, the price in US dollars.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ikea, aes(x = price_usd)) +\n  geom_histogram()\n```\n\n::: {.cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](lab-1_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\nUse the visualization to describe the distribution of price.\nIn your narrative, include description of the shape, approximate center, approximate spread, and any presence of outliers.\nBriefly explain why the median is more representative of the center of this distribution than the mean.\n\n::: callout-tip\nWhen using the visual editor you can insert a code chunk using the Insert menu on top or by using the catch-all `⌘ /` shortcut to insert just about anything.\nJust execute the shortcut then type what you want to insert.\nIf you are at the beginning of a line you can also enter plain `/` to invoke the shortcut.\n:::\n\n### Exercise 3\n\nWhen we make visualizations, we want them to be clear and suitable for a professional audience.\nThis means that, at a minimum, each visualization should have **an informative title** and **informative axis labels**.\nLet's modify the plot from the previous question to make it suitable for a professional audience.\nComplete the code below to include an informative title and informative axis labels.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ikea, aes(x = price_usd)) +\n  geom_histogram() +\n  labs(\n    x = \"_____\",\n    y = \"_____\",\n    title = \"_____\"\n  )\n```\n:::\n\n::: render-commit-push\nThis is a good place to fender, commit, and push changes to your remote lab-1 repo on GitHub.\nClick the checkbox next to each file in the Git pane to stage the updates you've made, write an informative commit message (e.g., \"Completed exercises 1 - 3\"), and push.\nAfter you push the changes, the Git pane in RStudio should be empty.\n:::\n\n### Exercise 4\n\nAnother way to visualize numeric data is using density plots.\nMake a density plot to visualize the distribution of `price_usd`.\nBe sure to include an informative title and informative axis labels.\n\nIn this course, we'll be most interested in the relationship between two or more variables, so let's begin by looking at the distribution of price by category.\nWe'll focus on the five categories in the code below, since these include commonly purchased types of furniture.\n\nUse the code below to create a new data frame that only includes the furniture categories of interest.\nWe're assigning this data frame to an object with a new name, so we don't overwrite the original data.\n\nHow many observations are in the `ikea_sub` dataset?\nHow many variables?\n\n::: {.cell}\n\n```{.r .cell-code}\nikea_sub <- ikea %>%\n  filter(category %in% c(\n    \"Tables & desks\", \"Beds\",\n    \"Bookcases & shelving units\",\n    \"Sofas & armchairs\", \"Children's furniture\"\n  ))\n```\n:::\n\n::: callout-important\nYou will use this newly constructed data frame, `ikea_sub`, for the remainder of the lab.\n:::\n\n### Exercise 5\n\nLet's make a new visualization with the density curves colored by category, so we can compare the distribution of price for each category.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ikea_sub, aes(x = price_usd, fill = category)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](lab-1_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\nThe overlapping colors make it difficult to tell what's happening with the distributions for the categories plotted first and hence covered by categories plotted over them.\nWe can change the transparency level of the fill color to help with this.\nThe alpha argument takes values between 0 and 1: 0 is completely transparent and 1 is completely opaque.\nThere is no way to tell what value will work best, so it's best to try a few.\n\nRecreate the density plot using a more suitable alpha level, so we can more easily see the distribution of all the categories.\nInclude an informative title and informative axis labels.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ikea_sub, aes(x = price_usd, fill = category)) +\n  geom_density(alpha = 0.8)\n```\n\n::: {.cell-output-display}\n![](lab-1_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: render-commit-push\nThis is a good place to render, commit, and push changes to your remote lab-1 repo on GitHub.\nClick the checkbox next to each file in the Git pane to stage the updates you've made, write an informative commit message (e.g., \"Completed exercises 4 and 5\"), and push.\nAfter you push the changes, the Git pane in RStudio should be empty.\n:::\n\n### Exercise 6\n\nBriefly describe why we defined the fill of the curves by mapping aesthetics of the plot (inside the `aes` function) but we defined the alpha level as a characteristic of the plotting `geom`.\n\n### Exercise 7\n\nOverlapping density plots are not the only way to visualize the relationship between a quantitative and categorical variable.\n\nUse a different type of plot to visualize the relationship between `price_usd` and `category`.\nInclude an informative title and informative axis labels.\n\n::: callout-tip\nYou can use the [ggplot2 cheatsheet](https://github.com/rstudio/cheatsheets/raw/main/data-visualization.pdf) and [from Data to Viz](https://www.data-to-viz.com) for inspiration.\n:::\n\n### Exercise 8\n\nCompare and contrast your plots from the previous exercise to the overlapping density plots from [Exercise 5].\nWhat features are apparent in the plot from the previous exercise that aren't in the overlapping density plots?\nWhat features are apparent in the overlapping density plots that aren't in the plot from the previous exercise?\nWhat features are apparent in both?\n\n::: render-commit-push\nThis is a good place to render, commit, and push changes to your remote lab-1 repo on GitHub.\nClick the checkbox next to each file in the Git pane to stage the updates you've made, write an informative commit message (e.g., \"Completed exercises 6 - 8\"), and push.\nAfter you push the changes, the Git pane in RStudio should be empty.\n:::\n\n### Exercise 9\n\nNext, let's look at the relationship between the price and width of Ikea furniture.\nFill in the code below to visualize the relationship between the two variables using a scatterplot.\n\nThen, use your visualization to describe the relationship between the width and price of Ikea furniture.\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = _____, aes(x = width, y = _____)) +\n  geom_point() + \n  labs(\n    x = \"_____\", \n    y = \"_____\", \n    title = \"_____\"\n    )\n```\n:::\n\n### Exercise 10\n\nColor the points of the scatterplot by category.\nDescribe how the relationship between price and width of Ikea furniture differs by category, if at all.\n\n::: render-commit-push\nYou're done and ready to submit your work!\nRender, commit, and push all remaining changes.\nYou can use the commit message \"Done with Lab 1!\" , and make sure you have committed and pushed all changed files to GitHub (your Git pane in RStudio should be empty) and that **all** documents are updated in your repo on GitHub.\nThe PDF document you submit to Gradescope should be identical to the one in your GitHub repo.\n:::\n\n## Submission\n\nIn this class, we'll be submitting PDF documents to Gradescope.\n\n::: callout-warning\nBefore you wrap up the assignment, make sure all documents are updated on your GitHub repo.\nWe will be checking these to make sure you have been practicing how to commit and push changes.\n\nRemember -- you must turn in a PDF file to the Gradescope page before the submission deadline for full credit.\n:::\n\nTo submit your assignment:\n\n-   Go to [http://www.gradescope.com](http://www.gradescope.com/) and click *Log in* in the top right corner.\n-   Click *School Credentials* ➡️ *Duke NetID* and log in using your NetID credentials.\n-   Click on your *STA 210* course.\n-   Click on the assignment, and you'll be prompted to submit it.\n-   Mark the pages associated with each exercise. All of the pages of your lab should be associated with at least one question (i.e., should be \"checked\").\n-   Select the first page of your PDF submission to be associated with the *\"Workflow & formatting\"* section.\n\n## Grading\n\nTotal points available: 50 points.\n\n| Component             | Points |\n|-----------------------|--------|\n| Ex 1 - 10             | 45     |\n| Workflow & formatting | 5[^1]  |\n\n[^1]: The \"Workflow & formatting\" grade is to assess the reproducible workflow.\n    This includes having at least 3 informative commit messages and updating the name and date in the YAML.\n\n## Resources for additional practice (optional)\n\n-   [Chapter 2: Get Started](https://socviz.co/gettingstarted.html#work-in-plain-text-using-rmarkdown) *Data Visualization by Kieran Healy*\n-   [Chapter 3: Data visualization](https://r4ds.had.co.nz/data-visualisation.html) in *R for Data Science* by Hadley Wickham\n-   RStudio Cloud Primers\n    -   Visualization Basics: <https://rstudio.cloud/learn/primers/1.1>\n    -   Work with Data: <https://rstudio.cloud/learn/primers/2>\n    -   Visualize Data: <https://rstudio.cloud/learn/primers/3>",
    "supporting": [
      "lab-1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}