{
  "hash": "556dbb016403b49a39bda1fe3bf0b732",
  "result": {
    "markdown": "---\ntitle: \"Feature engineering\"\nsubtitle: \"STA 210 - Spring 2022\"\nauthor: \"Dr. Mine Çetinkaya-Rundel\"\nfooter: \"[sta210-s22.github.io/website](https://sta210-s22.github.io/website/)\"\nlogo: \"images/logo.png\"\nformat: \n  revealjs:\n    theme: slides.scss\n    multiplex: true\n    transition: fade\n    slide-number: true\n    incremental: true \n    chalkboard: true\neditor: visual\nexecute:\n  freeze: auto\n---\n\n\n\n# Welcome\n\n## Announcements\n\n::: nonincremental\n-   My Monday office hours moved to 8-9pm\n:::\n\n## Topics\n\n::: nonincremental\n-   Feature engineering with recipes\n-   Workflows to bring together models and recipes\n-   RMSE and $R^2$ for model evaluation\n-   Cross validation\n:::\n\n## Computational setup\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(gghighlight)\nlibrary(knitr)\n\n# set default theme and larger font size for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 20))\n```\n:::\n\n# Introduction\n\n## The Office\n\n![](images/lec-13/the-office.jpeg)\n\n## Data & goal\n\n-   Data: The data come from [data.world](https://data.world/anujjain7/the-office-imdb-ratings-dataset), by way of [TidyTuesday](https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-03-17/readme.md)\n\n-   Goal: Predict `imdb_rating` from other variables in the dataset\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_ratings <- read_csv(here::here(\"slides\", \"data/office_ratings.csv\"))\noffice_ratings\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 188 × 6\n   season episode title             imdb_rating total_votes air_date  \n    <dbl>   <dbl> <chr>                   <dbl>       <dbl> <date>    \n 1      1       1 Pilot                     7.6        3706 2005-03-24\n 2      1       2 Diversity Day             8.3        3566 2005-03-29\n 3      1       3 Health Care               7.9        2983 2005-04-05\n 4      1       4 The Alliance              8.1        2886 2005-04-12\n 5      1       5 Basketball                8.4        3179 2005-04-19\n 6      1       6 Hot Girl                  7.8        2852 2005-04-26\n 7      2       1 The Dundies               8.7        3213 2005-09-20\n 8      2       2 Sexual Harassment         8.2        2736 2005-09-27\n 9      2       3 Office Olympics           8.4        2742 2005-10-04\n10      2       4 The Fire                  8.4        2713 2005-10-11\n# … with 178 more rows\n```\n:::\n:::\n\n# Modeling\n\n## Train / test\n\n**Step 1:** Create an initial split:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(123)\noffice_split <- initial_split(office_ratings) # prop = 3/4 by default\n```\n:::\n\n**Step 2:** Save training data\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_train <- training(office_split)\ndim(office_train)\n```\n\n::: {.cell-output-stdout}\n```\n[1] 141   6\n```\n:::\n:::\n\n**Step 3:** Save testing data\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_test  <- testing(office_split)\ndim(office_test)\n```\n\n::: {.cell-output-stdout}\n```\n[1] 47  6\n```\n:::\n:::\n\n## Training data\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_train\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 141 × 6\n   season episode title               imdb_rating total_votes air_date  \n    <dbl>   <dbl> <chr>                     <dbl>       <dbl> <date>    \n 1      8      18 Last Day in Florida         7.8        1429 2012-03-08\n 2      9      14 Vandalism                   7.6        1402 2013-01-31\n 3      2       8 Performance Review          8.2        2416 2005-11-15\n 4      9       5 Here Comes Treble           7.1        1515 2012-10-25\n 5      3      22 Beach Games                 9.1        2783 2007-05-10\n 6      7       1 Nepotism                    8.4        1897 2010-09-23\n 7      3      15 Phyllis' Wedding            8.3        2283 2007-02-08\n 8      9      21 Livin' the Dream            8.9        2041 2013-05-02\n 9      9      18 Promos                      8          1445 2013-04-04\n10      8      12 Pool Party                  8          1612 2012-01-19\n# … with 131 more rows\n```\n:::\n:::\n\n## Recap: Feature engineering\n\n-   We prefer simple models when possible, but **parsimony** does not mean sacrificing accuracy (or predictive performance) in the interest of simplicity\n\n-   Variables that go into the model and how they are represented are just as critical to success of the model\n\n-   **Feature engineering** allows us to get creative with our predictors in an effort to make them more useful for our model (to increase its predictive performance)\n\n## Recap: Modeling workflow, revisited\n\n-   Create a **recipe** for feature engineering steps to be applied to the training data\n\n-   Fit the model to the training data after these steps have been applied\n\n-   Using the model estimates from the training data, predict outcomes for the test data\n\n-   Evaluate the performance of the model on the test data\n\n# Building recipes\n\n## Initiate a recipe\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|2|3\"}\noffice_rec <- recipe(\n  imdb_rating ~ .,    # formula\n  data = office_train # data for cataloguing names and types of variables\n  )\n\noffice_rec\n```\n\n::: {.cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n   outcome          1\n predictor          5\n```\n:::\n:::\n\n## Step 1: Alter roles\n\n`title` isn't a predictor, but we might want to keep it around as an ID\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\noffice_rec <- office_rec %>%\n  update_role(title, new_role = \"ID\")\n\noffice_rec\n```\n\n::: {.cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n        ID          1\n   outcome          1\n predictor          4\n```\n:::\n:::\n\n## Step 2: Add features\n\nNew features for day of week and month\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\noffice_rec <- office_rec %>%\n  step_date(air_date, features = c(\"dow\", \"month\"))\n\noffice_rec\n```\n\n::: {.cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n        ID          1\n   outcome          1\n predictor          4\n\nOperations:\n\nDate features from air_date\n```\n:::\n:::\n\n## Working with recipes {.smaller}\n\n-   When building recipes you in a pipeline, you don't get to see the effect of the recipe on your data, which can be unsettling\n-   You can take a peek at what will happen when you ultimately apply the recipe to your data at the time of fitting the model\n-   This requires two functions: `prep()` to train the recipe and `bake()` to apply it to your data\n\n. . .\n\n::: callout-note\nThis is optional, we'll show the results for demonstrative purposes.\nIt doesn't need to be part of your modeling pipeline, but I find it assuring to see the effects of the recipe steps as I build the recipe.\n:::\n\n## Step 2: Prep and bake\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_rec_trained <- prep(office_rec)\nbake(office_rec_trained, office_train) %>%\n  glimpse()\n```\n\n::: {.cell-output-stdout}\n```\nRows: 141\nColumns: 8\n$ season         <dbl> 8, 9, 2, 9, 3, 7, 3, 9, 9, 8, 5, 5, 9, 6, 7, 6, 5, 2, 2…\n$ episode        <dbl> 18, 14, 8, 5, 22, 1, 15, 21, 18, 12, 25, 26, 12, 1, 20,…\n$ title          <fct> \"Last Day in Florida\", \"Vandalism\", \"Performance Review…\n$ total_votes    <dbl> 1429, 1402, 2416, 1515, 2783, 1897, 2283, 2041, 1445, 1…\n$ air_date       <date> 2012-03-08, 2013-01-31, 2005-11-15, 2012-10-25, 2007-0…\n$ imdb_rating    <dbl> 7.8, 7.6, 8.2, 7.1, 9.1, 8.4, 8.3, 8.9, 8.0, 8.0, 8.7, …\n$ air_date_dow   <fct> Thu, Thu, Tue, Thu, Thu, Thu, Thu, Thu, Thu, Thu, Thu, …\n$ air_date_month <fct> Mar, Jan, Nov, Oct, May, Sep, Feb, May, Apr, Jan, May, …\n```\n:::\n:::\n\n## Step 3: Add more features {.smaller}\n\nIdentify holidays in `air_date`, then remove `air_date`\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|2,3,4,5,6\"}\noffice_rec <- office_rec %>%\n  step_holiday(\n    air_date, \n    holidays = c(\"USThanksgivingDay\", \"USChristmasDay\", \"USNewYearsDay\", \"USIndependenceDay\"), \n    keep_original_cols = FALSE\n  )\n\noffice_rec\n```\n\n::: {.cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n        ID          1\n   outcome          1\n predictor          4\n\nOperations:\n\nDate features from air_date\nHoliday features from air_date\n```\n:::\n:::\n\n## Step 3: Prep and bake {.smaller}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_rec_trained <- prep(office_rec)\nbake(office_rec_trained, office_train) %>%\n  glimpse()\n```\n\n::: {.cell-output-stdout}\n```\nRows: 141\nColumns: 11\n$ season                     <dbl> 8, 9, 2, 9, 3, 7, 3, 9, 9, 8, 5, 5, 9, 6, 7…\n$ episode                    <dbl> 18, 14, 8, 5, 22, 1, 15, 21, 18, 12, 25, 26…\n$ title                      <fct> \"Last Day in Florida\", \"Vandalism\", \"Perfor…\n$ total_votes                <dbl> 1429, 1402, 2416, 1515, 2783, 1897, 2283, 2…\n$ imdb_rating                <dbl> 7.8, 7.6, 8.2, 7.1, 9.1, 8.4, 8.3, 8.9, 8.0…\n$ air_date_dow               <fct> Thu, Thu, Tue, Thu, Thu, Thu, Thu, Thu, Thu…\n$ air_date_month             <fct> Mar, Jan, Nov, Oct, May, Sep, Feb, May, Apr…\n$ air_date_USThanksgivingDay <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_USChristmasDay    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_USNewYearsDay     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_USIndependenceDay <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n```\n:::\n:::\n\n## Step 4: Convert numbers to factors {.smaller}\n\nConvert `season` to factor\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\noffice_rec <- office_rec %>%\n  step_num2factor(season, levels = as.character(1:9))\n\noffice_rec\n```\n\n::: {.cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n        ID          1\n   outcome          1\n predictor          4\n\nOperations:\n\nDate features from air_date\nHoliday features from air_date\nFactor variables from season\n```\n:::\n:::\n\n## Step 4: Prep and bake {.smaller}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_rec_trained <- prep(office_rec)\nbake(office_rec_trained, office_train) %>%\n  glimpse()\n```\n\n::: {.cell-output-stdout}\n```\nRows: 141\nColumns: 11\n$ season                     <fct> 8, 9, 2, 9, 3, 7, 3, 9, 9, 8, 5, 5, 9, 6, 7…\n$ episode                    <dbl> 18, 14, 8, 5, 22, 1, 15, 21, 18, 12, 25, 26…\n$ title                      <fct> \"Last Day in Florida\", \"Vandalism\", \"Perfor…\n$ total_votes                <dbl> 1429, 1402, 2416, 1515, 2783, 1897, 2283, 2…\n$ imdb_rating                <dbl> 7.8, 7.6, 8.2, 7.1, 9.1, 8.4, 8.3, 8.9, 8.0…\n$ air_date_dow               <fct> Thu, Thu, Tue, Thu, Thu, Thu, Thu, Thu, Thu…\n$ air_date_month             <fct> Mar, Jan, Nov, Oct, May, Sep, Feb, May, Apr…\n$ air_date_USThanksgivingDay <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_USChristmasDay    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_USNewYearsDay     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_USIndependenceDay <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n```\n:::\n:::\n\n## Step 5: Make dummy variables {.smaller}\n\nConvert all nominal (categorical) predictors to factors\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\noffice_rec <- office_rec %>%\n  step_dummy(all_nominal_predictors())\n\noffice_rec\n```\n\n::: {.cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n        ID          1\n   outcome          1\n predictor          4\n\nOperations:\n\nDate features from air_date\nHoliday features from air_date\nFactor variables from season\nDummy variables from all_nominal_predictors()\n```\n:::\n:::\n\n## Step 5: Prep and bake {.smaller}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_rec_trained <- prep(office_rec)\nbake(office_rec_trained, office_train) %>%\n  glimpse()\n```\n\n::: {.cell-output-stdout}\n```\nRows: 141\nColumns: 33\n$ episode                    <dbl> 18, 14, 8, 5, 22, 1, 15, 21, 18, 12, 25, 26…\n$ title                      <fct> \"Last Day in Florida\", \"Vandalism\", \"Perfor…\n$ total_votes                <dbl> 1429, 1402, 2416, 1515, 2783, 1897, 2283, 2…\n$ imdb_rating                <dbl> 7.8, 7.6, 8.2, 7.1, 9.1, 8.4, 8.3, 8.9, 8.0…\n$ air_date_USThanksgivingDay <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_USChristmasDay    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_USNewYearsDay     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_USIndependenceDay <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ season_X2                  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ season_X3                  <dbl> 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0…\n$ season_X4                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ season_X5                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0…\n$ season_X6                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n$ season_X7                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1…\n$ season_X8                  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0…\n$ season_X9                  <dbl> 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0…\n$ air_date_dow_Mon           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_dow_Tue           <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_dow_Wed           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_dow_Thu           <dbl> 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ air_date_dow_Fri           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_dow_Sat           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_month_Feb         <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_month_Mar         <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_month_Apr         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1…\n$ air_date_month_May         <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0…\n$ air_date_month_Jun         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_month_Jul         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_month_Aug         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_month_Sep         <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n$ air_date_month_Oct         <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_month_Nov         <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ air_date_month_Dec         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n```\n:::\n:::\n\n## Step 6: Remove zero variance predictors {.smaller}\n\nRemove all predictors that contain only a single value\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\noffice_rec <- office_rec %>%\n  step_zv(all_predictors())\n\noffice_rec\n```\n\n::: {.cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n        ID          1\n   outcome          1\n predictor          4\n\nOperations:\n\nDate features from air_date\nHoliday features from air_date\nFactor variables from season\nDummy variables from all_nominal_predictors()\nZero variance filter on all_predictors()\n```\n:::\n:::\n\n## Step 6: Prep and bake {.smaller}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_rec_trained <- prep(office_rec)\nbake(office_rec_trained, office_train) %>%\n  glimpse()\n```\n\n::: {.cell-output-stdout}\n```\nRows: 141\nColumns: 22\n$ episode            <dbl> 18, 14, 8, 5, 22, 1, 15, 21, 18, 12, 25, 26, 12, 1,…\n$ title              <fct> \"Last Day in Florida\", \"Vandalism\", \"Performance Re…\n$ total_votes        <dbl> 1429, 1402, 2416, 1515, 2783, 1897, 2283, 2041, 144…\n$ imdb_rating        <dbl> 7.8, 7.6, 8.2, 7.1, 9.1, 8.4, 8.3, 8.9, 8.0, 8.0, 8…\n$ season_X2          <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ season_X3          <dbl> 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ season_X4          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ season_X5          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, …\n$ season_X6          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, …\n$ season_X7          <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, …\n$ season_X8          <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, …\n$ season_X9          <dbl> 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, …\n$ air_date_dow_Tue   <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ air_date_dow_Thu   <dbl> 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ air_date_month_Feb <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ air_date_month_Mar <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ air_date_month_Apr <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, …\n$ air_date_month_May <dbl> 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, …\n$ air_date_month_Sep <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, …\n$ air_date_month_Oct <dbl> 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, …\n$ air_date_month_Nov <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, …\n$ air_date_month_Dec <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n```\n:::\n:::\n\n## Putting it altogether {.smaller}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_rec <- recipe(imdb_rating ~ ., data = office_train) %>%\n  # make title's role ID\n  update_role(title, new_role = \"ID\") %>%\n  # extract day of week and month of air_date\n  step_date(air_date, features = c(\"dow\", \"month\")) %>%\n  # identify holidays and add indicators\n  step_holiday(\n    air_date, \n    holidays = c(\"USThanksgivingDay\", \"USChristmasDay\", \"USNewYearsDay\", \"USIndependenceDay\"), \n    keep_original_cols = FALSE\n  ) %>%\n  # turn season into factor\n  step_num2factor(season, levels = as.character(1:9)) %>%\n  # make dummy variables\n  step_dummy(all_nominal_predictors()) %>%\n  # remove zero variance predictors\n  step_zv(all_predictors())\n```\n:::\n\n## Putting it altogether {.smaller}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_rec\n```\n\n::: {.cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n        ID          1\n   outcome          1\n predictor          4\n\nOperations:\n\nDate features from air_date\nHoliday features from air_date\nFactor variables from season\nDummy variables from all_nominal_predictors()\nZero variance filter on all_predictors()\n```\n:::\n:::\n\n# Building workflows\n\n## Specify model\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_spec <- linear_reg() %>%\n  set_engine(\"lm\")\n\noffice_spec\n```\n\n::: {.cell-output-stdout}\n```\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n:::\n:::\n\n## Build workflow\n\n**Workflows** bring together models and recipes so that they can be easily applied to both the training and test data.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_wflow <- workflow() %>%\n  add_model(office_spec) %>%\n  add_recipe(office_rec)\n```\n:::\n\n<br>\n\n*See next slide for workflow...*\n\n## View workflow\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_wflow\n```\n\n::: {.cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n5 Recipe Steps\n\n• step_date()\n• step_holiday()\n• step_num2factor()\n• step_dummy()\n• step_zv()\n\n── Model ───────────────────────────────────────────────────────────────────────\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n:::\n:::\n\n## Fit model to training data {.smaller}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_fit <- office_wflow %>%\n  fit(data = office_train)\n\ntidy(office_fit)\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 21 × 5\n   term         estimate std.error statistic  p.value\n   <chr>           <dbl>     <dbl>     <dbl>    <dbl>\n 1 (Intercept)  6.40     0.510        12.5   1.51e-23\n 2 episode     -0.00393  0.0171       -0.230 8.18e- 1\n 3 total_votes  0.000375 0.0000414     9.07  2.75e-15\n 4 season_X2    0.811    0.327         2.48  1.44e- 2\n 5 season_X3    1.04     0.343         3.04  2.91e- 3\n 6 season_X4    1.09     0.295         3.70  3.32e- 4\n 7 season_X5    1.08     0.348         3.11  2.34e- 3\n 8 season_X6    1.00     0.367         2.74  7.18e- 3\n 9 season_X7    1.02     0.352         2.89  4.52e- 3\n10 season_X8    0.497    0.348         1.43  1.55e- 1\n# … with 11 more rows\n```\n:::\n:::\n\n<br>\n\n. . .\n\n*So many predictors!*\n\n## Model fit summary\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntidy(office_fit) %>% print(n = 21)\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 21 × 5\n   term                estimate std.error statistic  p.value\n   <chr>                  <dbl>     <dbl>     <dbl>    <dbl>\n 1 (Intercept)         6.40     0.510        12.5   1.51e-23\n 2 episode            -0.00393  0.0171       -0.230 8.18e- 1\n 3 total_votes         0.000375 0.0000414     9.07  2.75e-15\n 4 season_X2           0.811    0.327         2.48  1.44e- 2\n 5 season_X3           1.04     0.343         3.04  2.91e- 3\n 6 season_X4           1.09     0.295         3.70  3.32e- 4\n 7 season_X5           1.08     0.348         3.11  2.34e- 3\n 8 season_X6           1.00     0.367         2.74  7.18e- 3\n 9 season_X7           1.02     0.352         2.89  4.52e- 3\n10 season_X8           0.497    0.348         1.43  1.55e- 1\n11 season_X9           0.621    0.345         1.80  7.41e- 2\n12 air_date_dow_Tue    0.382    0.422         0.904 3.68e- 1\n13 air_date_dow_Thu    0.284    0.389         0.731 4.66e- 1\n14 air_date_month_Feb -0.0597   0.132        -0.452 6.52e- 1\n15 air_date_month_Mar -0.0752   0.156        -0.481 6.31e- 1\n16 air_date_month_Apr  0.0954   0.177         0.539 5.91e- 1\n17 air_date_month_May  0.156    0.213         0.734 4.64e- 1\n18 air_date_month_Sep -0.0776   0.223        -0.348 7.28e- 1\n19 air_date_month_Oct -0.176    0.174        -1.01  3.13e- 1\n20 air_date_month_Nov -0.156    0.149        -1.05  2.98e- 1\n21 air_date_month_Dec  0.170    0.149         1.14  2.55e- 1\n```\n:::\n:::\n\n# Evaluate model\n\n## Make predictions for training data\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_train_pred <- predict(office_fit, office_train) %>%\n  bind_cols(office_train %>% select(imdb_rating, title))\n\noffice_train_pred\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 141 × 3\n   .pred imdb_rating title              \n   <dbl>       <dbl> <chr>              \n 1  7.57         7.8 Last Day in Florida\n 2  7.77         7.6 Vandalism          \n 3  8.31         8.2 Performance Review \n 4  7.67         7.1 Here Comes Treble  \n 5  8.84         9.1 Beach Games        \n 6  8.33         8.4 Nepotism           \n 7  8.46         8.3 Phyllis' Wedding   \n 8  8.14         8.9 Livin' the Dream   \n 9  7.87         8   Promos             \n10  7.74         8   Pool Party         \n# … with 131 more rows\n```\n:::\n:::\n\n## R-squared\n\nPercentage of variability in the IMDB ratings explained by the model.\n\n. . .\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrsq(office_train_pred, truth = imdb_rating, estimate = .pred)\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rsq     standard       0.670\n```\n:::\n:::\n\n. . .\n\n::: question\nAre models with high or low $R^2$ more preferable?\n:::\n\n## RMSE\n\nAn alternative model performance statistic: **root mean square error**.\n\n$$ RMSE = \\sqrt{\\frac{\\sum_{i = 1}^n (y_i - \\hat{y}_i)^2}{n}} $$\n\n. . .\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrmse(office_train_pred, truth = imdb_rating, estimate = .pred)\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard       0.302\n```\n:::\n:::\n\n. . .\n\n::: question\nAre models with high or low RMSE are more preferable?\n:::\n\n## Interpreting RMSE\n\n::: question\nIs this RMSE considered low or high?\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrmse(office_train_pred, truth = imdb_rating, estimate = .pred)\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard       0.302\n```\n:::\n:::\n\n<br>\n\n. . .\n\nDepends...\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_train %>%\n  summarise(min = min(imdb_rating), max = max(imdb_rating))\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 1 × 2\n    min   max\n  <dbl> <dbl>\n1   6.7   9.7\n```\n:::\n:::\n\n## But, really...\n\n*who cares about predictions on **training** data?*\n\n## Make predictions for testing data\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_test_pred <- predict(office_fit, office_test) %>%\n  bind_cols(office_test %>% select(imdb_rating, title))\n\noffice_test_pred\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 47 × 3\n   .pred imdb_rating title              \n   <dbl>       <dbl> <chr>              \n 1  8.03         8.3 Diversity Day      \n 2  7.98         7.9 Health Care        \n 3  8.41         8.4 The Fire           \n 4  8.35         8.2 Halloween          \n 5  8.35         8.4 E-Mail Surveillance\n 6  8.68         9   The Injury         \n 7  8.32         7.9 The Carpet         \n 8  8.93         9.3 Casino Night       \n 9  8.80         8.9 Gay Witch Hunt     \n10  8.37         8.2 Initiation         \n# … with 37 more rows\n```\n:::\n:::\n\n## Evaluate performance for testing data\n\nRMSE of model fit to **testing** data\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrmse(office_test_pred, truth = imdb_rating, estimate = .pred)\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard       0.411\n```\n:::\n:::\n\nR-sq of model fit to **testing** data\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrsq(office_test_pred, truth = imdb_rating, estimate = .pred)\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rsq     standard       0.468\n```\n:::\n:::\n\n## Training vs. testing\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n| metric    |          train |          test | comparison                    |\n|:----------|---------------:|--------------:|:------------------------------|\n| RMSE      | 0.302 | 0.411 | RMSE lower for training       |\n| R-squared |  0.67 |  0.468 | R-squared higher for training |\n\n## Evaluating performance on training data {.smaller}\n\n-   The training set does not have the capacity to be a good arbiter of performance.\n\n-   It is not an independent piece of information; predicting the training set can only reflect what the model already knows.\n\n-   Suppose you give a class a test, then give them the answers, then provide the same test.\n    The student scores on the second test do not accurately reflect what they know about the subject; these scores would probably be higher than their results on the first test.",
    "supporting": [
      "lec-13_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}