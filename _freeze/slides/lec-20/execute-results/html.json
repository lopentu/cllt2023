{
  "hash": "8334bab47545588b2c161bf25745732c",
  "result": {
    "markdown": "---\ntitle: \"LR: Prediction / classification\"\nsubtitle: \"STA 210 - Spring 2022\"\nauthor: \"Dr. Mine Çetinkaya-Rundel\"\nfooter: \"[sta210-s22.github.io/website](https://sta210-s22.github.io/website/)\"\nlogo: \"images/logo.png\"\nformat: \n  revealjs:\n    theme: slides.scss\n    transition: fade\n    slide-number: true\n    incremental: true \n    chalkboard: true\neditor: visual\nexecute:\n  freeze: auto\n  echo: true\n---\n\n\n\n# Welcome\n\n## Topics\n\n::: nonincremental\n-   Bulding predictive logistic regression models\n-   Sensitivity and specificity\n-   Making classification decisions\n:::\n\n## Computational setup\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(openintro)\nlibrary(knitr)\n\n# set default theme and larger font size for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 20))\n```\n:::\n\n# Data\n\n## `openintro::email` {.smaller}\n\nThese data represent incoming emails for the first three months of 2012 for an email account.\n\n::: nonincremental\n-   Outcome: `spam` - Indicator for whether the email was spam.\n-   Predictors: `spam`, \\``to_multiple`, `from`, `cc`, `sent_email`, `time`, `image`, `attach`, `dollar`, `winner`, `inherit`, `viagra`, `password`, `num_char`, `line_breaks`, `format`, `re_subj`, `exclaim_subj`, `urgent_subj`, `exclaim_mess`, `number`.\n:::\n\nSee [here](http://openintrostat.github.io/openintro/reference/email.html) for more detailed information on the variables.\n\n## Training and testing split\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Fix random numbers by setting the seed \n# Enables analysis to be reproducible when random numbers are used \nset.seed(1116)\n\n# Put 75% of the data into the training set \nemail_split <- initial_split(email)\n\n# Create data frames for the two sets\nemail_train <- training(email_split)\nemail_test  <- testing(email_split)\n```\n:::\n\n## Exploratory analysis\n\nThe sample is **unbalanced** with respect to `spam`.\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lec-20_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=90%}\n:::\n:::\n\n## Reminder: Modeling workflow\n\n-   Create a recipe for feature engineering steps to be applied to the training data\n\n-   Fit the model to the training data after these steps have been applied\n\n-   Using the model estimates from the training data, predict outcomes for the test data\n\n-   Evaluate the performance of the model on the test data\n\n# Start with a recipe\n\n## Initiate a recipe {.smaller}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- recipe(\n  spam ~ .,          # formula\n  data = email_train  # data to use for cataloging names and types of variables\n  )\nsummary(email_rec)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-stdout}\n```\n# A tibble: 21 × 4\n   variable     type    role      source  \n   <chr>        <chr>   <chr>     <chr>   \n 1 to_multiple  nominal predictor original\n 2 from         nominal predictor original\n 3 cc           numeric predictor original\n 4 sent_email   nominal predictor original\n 5 time         date    predictor original\n 6 image        numeric predictor original\n 7 attach       numeric predictor original\n 8 dollar       numeric predictor original\n 9 winner       nominal predictor original\n10 inherit      numeric predictor original\n11 viagra       numeric predictor original\n12 password     numeric predictor original\n13 num_char     numeric predictor original\n14 line_breaks  numeric predictor original\n15 format       nominal predictor original\n16 re_subj      nominal predictor original\n17 exclaim_subj numeric predictor original\n18 urgent_subj  nominal predictor original\n19 exclaim_mess numeric predictor original\n20 number       nominal predictor original\n21 spam         nominal outcome   original\n```\n:::\n:::\n\n## Remove certain variables\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- email_rec %>%\n  step_rm(from, sent_email)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n   outcome          1\n predictor         20\n\nOperations:\n\nDelete terms from, sent_email\n```\n:::\n:::\n\n## Feature engineer date\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- email_rec %>%\n  step_date(time, features = c(\"dow\", \"month\")) %>%\n  step_rm(time)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n   outcome          1\n predictor         20\n\nOperations:\n\nDelete terms from, sent_email\nDate features from time\nDelete terms time\n```\n:::\n:::\n\n## Discretize numeric variables\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- email_rec %>%\n  step_cut(cc, attach, dollar, breaks = c(0, 1))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n   outcome          1\n predictor         20\n\nOperations:\n\nDelete terms from, sent_email\nDate features from time\nDelete terms time\nCut numeric for cc, attach, dollar\n```\n:::\n:::\n\n## Create dummy variables\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- email_rec %>%\n  step_dummy(all_nominal(), -all_outcomes())\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n   outcome          1\n predictor         20\n\nOperations:\n\nDelete terms from, sent_email\nDate features from time\nDelete terms time\nCut numeric for cc, attach, dollar\nDummy variables from all_nominal(), -all_outcomes()\n```\n:::\n:::\n\n## Remove zero variance variables\n\nVariables that contain only a single value\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- email_rec %>%\n  step_zv(all_predictors())\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n   outcome          1\n predictor         20\n\nOperations:\n\nDelete terms from, sent_email\nDate features from time\nDelete terms time\nCut numeric for cc, attach, dollar\nDummy variables from all_nominal(), -all_outcomes()\nZero variance filter on all_predictors()\n```\n:::\n:::\n\n## All in one place\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_rec <- recipe(spam ~ ., data = email_train) %>%\n  step_rm(from, sent_email) %>%\n  step_date(time, features = c(\"dow\", \"month\")) %>%               \n  step_rm(time) %>%\n  step_cut(cc, attach, dollar, breaks = c(0, 1)) %>%\n  step_dummy(all_nominal_predictors()) %>%\n  step_zv(all_predictors())\n```\n:::\n\n# Build a workflow\n\n## Define model\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_spec <- logistic_reg() %>% \n  set_engine(\"glm\")\nemail_spec\n```\n\n::: {.cell-output-stdout}\n```\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n```\n:::\n:::\n\n## Define workflow {.smaller}\n\n**Remember:** Workflows bring together models and recipes so that they can be easily applied to both the training and test data.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_wflow <- workflow() %>% \n  add_model(email_spec) %>% \n  add_recipe(email_rec)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: logistic_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n6 Recipe Steps\n\n• step_rm()\n• step_date()\n• step_rm()\n• step_cut()\n• step_dummy()\n• step_zv()\n\n── Model ───────────────────────────────────────────────────────────────────────\nLogistic Regression Model Specification (classification)\n\nComputational engine: glm \n```\n:::\n:::\n\n## Fit model to training data {.smaller}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_fit <- email_wflow %>% \n  fit(data = email_train)\n\ntidy(email_fit) %>% print(n = 31)\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 27 × 5\n   term           estimate std.error statistic  p.value\n   <chr>             <dbl>     <dbl>     <dbl>    <dbl>\n 1 (Intercept)    -0.867     0.259     -3.34   8.32e- 4\n 2 image          -1.72      0.941     -1.83   6.78e- 2\n 3 inherit         0.359     0.179      2.01   4.48e- 2\n 4 viagra          1.90     40.6        0.0469 9.63e- 1\n 5 password       -0.951     0.405     -2.35   1.88e- 2\n 6 num_char        0.0475    0.0246     1.93   5.35e- 2\n 7 line_breaks    -0.00499   0.00140   -3.55   3.78e- 4\n 8 exclaim_subj   -0.196     0.287     -0.682  4.95e- 1\n 9 exclaim_mess    0.00845   0.00188    4.49   6.99e- 6\n10 to_multiple_X1 -2.65      0.370     -7.17   7.78e-13\n11 cc_X.1.68.     -0.350     0.518     -0.676  4.99e- 1\n12 attach_X.1.21.  2.17      0.399      5.44   5.19e- 8\n13 dollar_X.1.64.  0.122     0.230      0.529  5.97e- 1\n14 winner_yes      2.25      0.438      5.14   2.79e- 7\n15 format_X1      -0.945     0.165     -5.71   1.10e- 8\n16 re_subj_X1     -2.96      0.463     -6.39   1.61e-10\n17 urgent_subj_X1  4.77      1.26       3.79   1.51e- 4\n18 number_small   -0.928     0.173     -5.36   8.48e- 8\n19 number_big     -0.190     0.256     -0.740  4.59e- 1\n20 time_dow_Mon    0.116     0.307      0.379  7.05e- 1\n21 time_dow_Tue    0.394     0.279      1.41   1.58e- 1\n22 time_dow_Wed   -0.175     0.285     -0.613  5.40e- 1\n23 time_dow_Thu    0.134     0.288      0.467  6.41e- 1\n24 time_dow_Fri    0.101     0.288      0.352  7.25e- 1\n25 time_dow_Sat    0.308     0.310      0.995  3.20e- 1\n26 time_month_Feb  0.767     0.187      4.11   3.99e- 5\n27 time_month_Mar  0.524     0.186      2.82   4.81e- 3\n```\n:::\n:::\n\n# Make predictions\n\n## Make predictions for test data\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_pred <- predict(email_fit, email_test, type = \"prob\") %>% \n  bind_cols(email_test) \nemail_pred\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 981 × 23\n   .pred_0  .pred_1 spam  to_multiple from     cc sent_email time               \n     <dbl>    <dbl> <fct> <fct>       <fct> <int> <fct>      <dttm>             \n 1   0.962 0.0376   0     0           1         0 0          2012-01-01 02:03:59\n 2   0.995 0.00461  0     1           1         0 1          2012-01-01 12:55:06\n 3   0.999 0.00127  0     0           1         1 1          2012-01-01 14:38:32\n 4   0.997 0.00281  0     0           1         2 0          2012-01-01 18:32:53\n 5   0.987 0.0128   0     0           1         0 0          2012-01-02 00:42:16\n 6   0.999 0.000886 0     0           1         1 0          2012-01-02 10:12:51\n 7   0.994 0.00633  0     0           1         4 0          2012-01-02 11:45:36\n 8   0.851 0.149    0     0           1         0 0          2012-01-02 16:55:03\n 9   0.968 0.0318   0     0           1         0 0          2012-01-02 20:07:17\n10   0.997 0.00277  0     0           1         0 1          2012-01-02 23:34:50\n# … with 971 more rows, and 15 more variables: image <dbl>, attach <dbl>,\n#   dollar <dbl>, winner <fct>, inherit <dbl>, viagra <dbl>, password <dbl>,\n#   num_char <dbl>, line_breaks <int>, format <fct>, re_subj <fct>,\n#   exclaim_subj <dbl>, urgent_subj <fct>, exclaim_mess <dbl>, number <fct>\n```\n:::\n:::\n\n## A closer look at predictions\n\n::: question\nWhich of the following 10 emails will be misclassified?\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_pred %>%\n  arrange(desc(.pred_1)) %>%\n  select(contains(\"pred\"), spam)\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 981 × 3\n   .pred_0 .pred_1 spam \n     <dbl>   <dbl> <fct>\n 1  0.0223   0.978 1    \n 2  0.107    0.893 0    \n 3  0.109    0.891 1    \n 4  0.140    0.860 1    \n 5  0.149    0.851 0    \n 6  0.163    0.837 1    \n 7  0.197    0.803 0    \n 8  0.207    0.793 0    \n 9  0.235    0.765 1    \n10  0.240    0.760 1    \n# … with 971 more rows\n```\n:::\n:::\n\n# Sensitivity and specificity\n\n## False positive and negative {.smaller}\n\n|                              | Email is spam                 | Email is not spam             |\n|------------------------------|-------------------------------|-------------------------------|\n| Email classified as spam     | True positive                 | False positive (Type 1 error) |\n| Email classified as not spam | False negative (Type 2 error) | True negative                 |\n\n-   False negative rate = P(classified as not spam \\| Email spam) = FN / (TP + FN)\n\n-   False positive rate = P(classified as spam \\| Email not spam) = FP / (FP + TN)\n\n## Sensitivity and specificity {.smaller}\n\n|                              | Email is spam                     | Email is not spam                 |\n|------------------------------|-----------------------------------|-----------------------------------|\n| Email classified as spam     | True positive                     | False positive (**Type 1 error**) |\n| Email classified as not spam | False negative (**Type 2 error**) | True negative                     |\n\n-   Sensitivity = P(classified as spam \\| Email spam) = TP / (TP + FN)\n    -   Sensitivity = 1 − False negative rate\n-   Specificity = P(classified as not spam \\| Email not spam) = TN / (FP + TN)\n    -   Specificity = 1 − False positive rate\n\n. . .\n\n::: question\nIf you were designing a spam filter, would you want sensitivity and specificity to be high or low?\nWhat are the trade-offs associated with each decision?\n:::\n\n## Evaluate the performance\n\n**Receiver operating characteristic (ROC) curve**<sup>+</sup> which plot true positive rate vs. false positive rate (1 - specificity).\n\n::: aside\n<sup>+</sup> Originally developed for operators of military radar receivers, hence the name.\n:::\n\n::: columns\n::: {.column width=\"40%\"}\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_pred %>%\n  roc_curve(\n    truth = spam,\n    .pred_1,\n    event_level = \"second\"\n  ) %>%\n  autoplot()\n```\n:::\n:::\n\n::: {.column width=\"60%\"}\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lec-20_files/figure-revealjs/unnamed-chunk-24-1.png){fig-align='center' width=100%}\n:::\n:::\n:::\n:::\n\n## ROC curve, under the hood\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_pred %>%\n  roc_curve(\n    truth = spam,\n    .pred_1,\n    event_level = \"second\"\n  )\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 981 × 3\n    .threshold specificity sensitivity\n         <dbl>       <dbl>       <dbl>\n 1 -Inf            0                 1\n 2    1.31e-13     0                 1\n 3    2.63e- 8     0.00111           1\n 4    5.75e- 6     0.00223           1\n 5    1.36e- 5     0.00334           1\n 6    2.33e- 5     0.00446           1\n 7    2.74e- 5     0.00557           1\n 8    3.28e- 5     0.00669           1\n 9    4.59e- 5     0.00780           1\n10    4.78e- 5     0.00892           1\n# … with 971 more rows\n```\n:::\n:::\n\n## ROC curve\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lec-20_files/figure-revealjs/unnamed-chunk-26-1.png){fig-align='center' width=90%}\n:::\n:::\n\n## Evaluate the performance\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_pred %>%\n  roc_auc(\n    truth = spam,\n    .pred_1,\n    event_level = \"second\"\n  )\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.850\n```\n:::\n:::\n\n# Make decisions\n\n## Cutoff probability: 0.5 {.smaller}\n\n::: panel-tabset\n## Output\n\nSuppose we decide to label an email as spam if the model predicts the probability of spam to be **more than 0.5**.\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n|                             | Email is not spam| Email is spam|\n|:----------------------------|-----------------:|-------------:|\n|Email classified as not spam |               883|            73|\n|Email classified as spam     |                14|            11|\n:::\n:::\n\n## Code\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncutoff_prob <- 0.5\nemail_pred %>%\n  mutate(\n    spam_pred = as_factor(if_else(.pred_1 >= cutoff_prob, 1, 0)),\n    spam      = if_else(spam == 1, \"Email is spam\", \"Email is not spam\"),\n    spam_pred = if_else(spam_pred == 1, \"Email classified as spam\", \"Email classified as not spam\")\n    ) %>%\n  count(spam_pred, spam) %>%\n  pivot_wider(names_from = spam, values_from = n) %>%\n  kable(col.names = c(\"\", \"Email is not spam\", \"Email is spam\"))\n```\n:::\n:::\n\n## Confusion matrix\n\nCross-tabulation of observed and predicted classes:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_pred %>%\n  mutate(spam_predicted = as_factor(if_else(.pred_1 >= cutoff_prob, 1, 0))) %>%\n  conf_mat(truth = spam, estimate = spam_predicted)\n```\n\n::: {.cell-output-stdout}\n```\n          Truth\nPrediction   0   1\n         0 883  73\n         1  14  11\n```\n:::\n:::\n\n## Classification\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lec-20_files/figure-revealjs/unnamed-chunk-31-1.png){fig-align='center' width=90%}\n:::\n:::\n\n## Cutoff probability: 0.25 {.smaller}\n\n::: panel-tabset\n## Output\n\nSuppose we decide to label an email as spam if the model predicts the probability of spam to be **more than 0.25**.\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n|                             | Email is not spam| Email is spam|\n|:----------------------------|-----------------:|-------------:|\n|Email classified as not spam |               826|            42|\n|Email classified as spam     |                71|            42|\n:::\n:::\n\n## Code\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncutoff_prob <- 0.25\nemail_pred %>%\n  mutate(\n    spam_pred = as_factor(if_else(.pred_1 >= cutoff_prob, 1, 0)),\n    spam      = if_else(spam == 1, \"Email is spam\", \"Email is not spam\"),\n    spam_pred = if_else(spam_pred == 1, \"Email classified as spam\", \"Email classified as not spam\")\n    ) %>%\n  count(spam_pred, spam) %>%\n  pivot_wider(names_from = spam, values_from = n) %>%\n  kable(col.names = c(\"\", \"Email is not spam\", \"Email is spam\"))\n```\n:::\n:::\n\n## Classification\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lec-20_files/figure-revealjs/unnamed-chunk-33-1.png){fig-align='center' width=90%}\n:::\n:::\n\n## Cutoff probability: 0.75 {.smaller}\n\n::: panel-tabset\n## Output\n\nSuppose we decide to label an email as spam if the model predicts the probability of spam to be **more than 0.75**.\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n|                             | Email is not spam| Email is spam|\n|:----------------------------|-----------------:|-------------:|\n|Email classified as not spam |               893|            78|\n|Email classified as spam     |                 4|             6|\n:::\n:::\n\n## Code\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncutoff_prob <- 0.75\nemail_pred %>%\n  mutate(\n    spam_pred = as_factor(if_else(.pred_1 >= cutoff_prob, 1, 0)),\n    spam      = if_else(spam == 1, \"Email is spam\", \"Email is not spam\"),\n    spam_pred = if_else(spam_pred == 1, \"Email classified as spam\", \"Email classified as not spam\")\n    ) %>%\n  count(spam_pred, spam) %>%\n  pivot_wider(names_from = spam, values_from = n) %>%\n  kable(col.names = c(\"\", \"Email is not spam\", \"Email is spam\"))\n```\n:::\n:::\n\n## Classification\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lec-20_files/figure-revealjs/unnamed-chunk-35-1.png){fig-align='center' width=90%}\n:::\n:::",
    "supporting": [
      "lec-20_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}